=begin comment

DialMyCalls API

The DialMyCalls API

OpenAPI spec version: 2.0.1
Contact: support@dialmycalls.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::DialMyCalls::KeywordsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::DialMyCalls::ApiClient;
use WWW::DialMyCalls::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::DialMyCalls::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# delete_keyword_by_id
#
# Delete Keyword
# 
# @param string $keyword_id KeywordId (required)
{
    my $params = {
    'keyword_id' => {
        data_type => 'string',
        description => 'KeywordId',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_keyword_by_id' } = { 
    	summary => 'Delete Keyword',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub delete_keyword_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'keyword_id' is set
    unless (exists $args{'keyword_id'}) {
      croak("Missing the required parameter 'keyword_id' when calling delete_keyword_by_id");
    }

    # parse inputs
    my $_resource_path = '/keyword/{KeywordId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'application/xml');

    # path params
    if ( exists $args{'keyword_id'}) {
        my $_base_variable = "{" . "KeywordId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'keyword_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_keyword_by_id
#
# Get Keyword
# 
# @param string $keyword_id KeywordId (required)
{
    my $params = {
    'keyword_id' => {
        data_type => 'string',
        description => 'KeywordId',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_keyword_by_id' } = { 
    	summary => 'Get Keyword',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_keyword_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'keyword_id' is set
    unless (exists $args{'keyword_id'}) {
      croak("Missing the required parameter 'keyword_id' when calling get_keyword_by_id");
    }

    # parse inputs
    my $_resource_path = '/keyword/{KeywordId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'application/xml');

    # path params
    if ( exists $args{'keyword_id'}) {
        my $_base_variable = "{" . "KeywordId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'keyword_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_keywords
#
# List Keywords
# 
# @param string $range Range (ie \&quot;records&#x3D;201-300\&quot;) of keywords requested (optional)
{
    my $params = {
    'range' => {
        data_type => 'string',
        description => 'Range (ie \&quot;records&#x3D;201-300\&quot;) of keywords requested',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_keywords' } = { 
    	summary => 'List Keywords',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_keywords {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/keywords';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'application/xml');

    # header params
    if ( exists $args{'range'}) {
        $header_params->{'Range'} = $self->{api_client}->to_header_value($args{'range'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
